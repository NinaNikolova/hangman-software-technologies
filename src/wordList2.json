{
  "schema": "A structure in Z-notation that defines a state and operations on it.",
  "predicate": "An expression that can be true or false, used to define constraints.",
  "declaration": "Part of a schema that introduces variables and their types.",
  "signature": "The part of a schema listing variable names and types.",
  "state": "A collection of variables representing the current system data.",
  "initialization": "The process of setting an initial state in a schema.",
  "operation": "An action defined in a schema that may modify the state.",
  "precondition": "A condition that must hold true before an operation can execute.",
  "postcondition": "A condition that must be true after an operation completes.",
  "invariant": "A condition that must always hold within a system or schema.",
  "type": "A classification of data items such as integers, sets, or sequences.",
  "set": "A collection of distinct elements, often used in schemas.",
  "sequence": "An ordered collection of elements representing lists in Z.",
  "tuple": "An ordered list of elements used to group multiple values.",
  "function": "A mapping between elements of one set to another.",
  "relation": "A set of tuples representing associations between elements.",
  "total": "A function where each element in the domain is mapped to an element in the codomain.",
  "partial": "A function where some elements in the domain may not map to any codomain element.",
  "injective": "A function where each element in the domain maps to a unique element in the codomain.",
  "surjective": "A function where every element in the codomain has at least one element in the domain mapped to it.",
  "bijective": "A function that is both injective and surjective.",
  "domain": "The set of all possible input values for a function.",
  "codomain": "The set of all possible output values for a function.",
  "range": "The actual output values of a function from its domain.",
  "inverse": "A function that reverses the mapping of another function.",
  "composition": "Combining two functions so the output of one is the input to the other.",
  "identity": "A function that maps every element to itself.",
  "powerset": "The set of all subsets of a given set.",
  "subset": "A set whose elements are all in another set.",
  "superset": "A set containing all elements of a subset.",
  "proper": "A subset that contains fewer elements than the original set.",
  "union": "An operation combining all elements of two sets.",
  "intersection": "An operation producing a set of common elements in two sets.",
  "difference": "An operation giving elements in one set but not the other.",
  "empty": "A set with no elements.",
  "cartesian": "The set of all ordered pairs from two sets.",
  "membership": "A relation indicating that an element belongs to a set.",
  "notation": "Symbolized by '⊆', shows that one set is a subset of another.",
  "power": "Expresses the power set, written as P(S) for set S.",
  "existential": "Indicates that at least one element meets a condition, symbolized by ∃.",
  "universal": "Indicates that all elements meet a condition, symbolized by ∀.",
  "conjunction": "An operator (∧) that is true if both operands are true.",
  "disjunction": "An operator (∨) that is true if at least one operand is true.",
  "negation": "An operator (¬) that reverses the truth of its operand.",
  "equivalence": "An operation (⇔) indicating two statements are either both true or false.",
  "selection": "The operator (._) used to access schema components.",
  "inclusion": "When one schema includes all elements of another.",
  "decorated": "A schema with added conditions, often indicated by a prime (').",
  "stateschema": "Defines system state variables and invariants in Z.",
  "specification": "A mathematical description of a system’s properties.",
  "language": "A specification language using set theory and predicate logic.",
  "consistency": "Ensures no contradictory conditions exist in a specification.",
  "datatype": "A model defining data behavior rather than its implementation.",
  "modularization": "Dividing a specification into separate schemas for clarity.",
  "determinism": "Ensures operations produce consistent output for the same input.",
  "behavioral": "Specifying only the behaviors relevant to a system's purpose.",
  "structural": "Describing only essential structural properties.",
  "encapsulation": "Grouping variables and operations within a schema.",
  "scope": "Defines where a variable or schema component is accessible.",
  "binding": "Associating variables with values in a schema.",
  "constraint": "A restriction that variables must satisfy.",
  "typecheck": "Ensuring variable assignments respect defined types.",
  "implication": "A logical relationship where one statement implies another.",
  "traceability": "Linking each requirement to its design or implementation.",
  "verification": "Checking that a specification describes intended behavior.",
  "validation": "Ensuring the specification meets user needs.",
  "refinement": "Adding details to a specification while preserving requirements.",
  "axiomatic": "Defines system properties with axioms, without implementation.",
  "constructive": "Defines system properties step-by-step.",
  "expansion": "Adding variables or constraints to provide more functionality.",
  "contraction": "Simplifying a schema by reducing variables.",
  "hiding": "Restricting access to specific schema elements.",
  "predefined": "Standard types in Z, like integers and sets.",
  "observability": "Determining the internal state from outputs.",
  "modelchecking": "Verifying a specification against possible scenarios.",
  "consistencycheck": "Ensuring no conflicting statements in a specification.",
  "domainconstraint": "Defines allowable values for schema elements.",
  "meta": "A schema describing the structure of other schemas.",
  "calculus": "Operations combining or manipulating schemas.",
  "abstract": "A schema with high-level descriptions without detail.",
  "normalization": "The process of simplifying or standardizing a schema by eliminating redundant or unnecessary parts.",
  "restriction": "An operation that limits the domain of a schema by adding further conditions or constraints to its variables.",
  "renaming": "An operation that changes the name of a variable in a schema while keeping its type and constraints intact.",
  "extension": "An operation that adds new variables or conditions to an existing schema, expanding its definition."
}
