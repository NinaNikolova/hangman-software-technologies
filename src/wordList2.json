{
  "schema": "Структура в Z-нотация, която дефинира състояние и операциите върху него",
  "predicate": "Израз, който може да бъде истински или лъжлив, използва се за дефиниране на ограничения",
  "declaration": "Част от схема, която въвежда променливи и техните типове",
  "signature": "Част от схема, която изброява имената и типовете на променливите",
  "state": "Колекция от променливи, представляващи текущите данни на системата",
  "initialization": "Процес на задаване на начално състояние в схема",
  "operation": "Действие, дефинирано в схема, което може да променя състоянието",
  "precondition": "Условие, което трябва да бъде вярно преди изпълнението на операция",
  "postcondition": "Условие, което трябва да бъде вярно след завършването на операция",
  "invariant": "Условие, което трябва да бъде винаги вярно в рамките на система или схема",
  "type": "Класификация на елементи от данни като цели числа, множества или последователности",
  "set": "Колекция от различни елементи, често използвана в схеми",
  "sequence": "Подредена колекция от елементи, представяща списъци в Z",
  "tuple": "Подреден списък от елементи, използван за групиране на множество стойности",
  "function": "специален вид релация, при която елемент от едно множество е свързан с най-много един елемент от друго множество",
  "relation": "Множество от tuples, представляващи асоциации между елементи",
  "total": "функция, при която за всяко x ∈ A съществува едно y ∈ B: записва A→B",
  "partial": "функция, при която за всяко x ∈ A съществува най-много едно y ∈ B: записва A⇸B ",
  "injective": "функция, за която всеки елемент от dom(f) се асоциира с не повече от един елемент на ran(f) (най-много един съответстващ елемент) - “one-to-one” X ↣ Y",
  "surjective": "функция, за която всеки елемент от ran(f) се асоциира с поне един елемент на dom(f) (покрива всички елементи на Y) - “onto” X ↠ Y",
  "bijective": "f е едновременно one-to-one и onto: X ⤖ Y ",
  "domain": "Множество от всички възможни входни стойности за функция",
  "codomain": "Множество от всички възможни изходни стойности за функция",
  "range": "Реалните изходни стойности на функцията от нейния домейн",
  "inverse": "Функция, която обръща mapping на друга функция",
  "composition": "Съединяване на две функции така, че изходът на една да бъде входът на другата",
  "identity": "Функция, която maps всеки елемент към себе си.",
  "powerset": "Множество от всички подмножества на дадено множество",
  "subset": "Множество, чиито елементи са всички в друго множество",
  "superset": "Множество, което съдържа всички елементи на подмножество",
  "union": "Операция, която комбинира всички елементи на две множества",
  "intersection": "Операция, която извежда множество от общи елементи в две множества",
  "difference": "An operation giving elements in one set but not the other.",
  "empty": "Множество без елементи",
  "cartesian": "Множество от всички подредени двойки от две множества",
  "membership": "Отношение, което показва дали елемент принадлежи на множество",
  "power": "Изразява степенното множество power set: P(S) for set S.",
  "existential": "Показва, че поне един елемент удовлетворява дадено условие- ∃.",
  "universal": "Показва, че всички елементи удовлетворяват дадено условие- ∀.",
  "conjunction": "Оператор (∧), който е истинен, ако и двата операнда са истина",
  "disjunction": "Оператор (∨), който е истинен, ако поне един от операндите е истина",
  "negation": "Оператор (¬), който обръща истинността на операнда",
  "equivalence": "Операция (⇔), която показва, че две изказвания са или и двете истинни, или и двете лъжливи",
  "selection": "Оператор (._), използван за достъп до компоненти на схема",
  "inclusion": "Когато една схема включва всички елементи на друга",
  "decorated": "Схема с добавени условия, често показана с апостроф (')",
  "stateschema": "Дефинира променливи на състоянието на системата и инварианти в Z",
  "specification": "Математическо описание на свойствата на система",
  "consistency": "Осигурява, че не съществуват противоречиви условия в спецификацията",
  "datatype": "Модел, дефиниращ поведението на данни, а не тяхната имплементация",
  "modularization": "Разделяне на спецификация в отделни схеми за яснота",
  "determinism": "Осигурява, че операциите произвеждат последователни резултати за едни и същи входове.",
  "behavioral": "Специфициране само на поведенията, които са важни за целта на системата",
  "structural": "Описание само на основни структурни свойства",
  "encapsulation": "Групиране на променливи и операции в схема",
  "scope": "Определя къде променлива или компонент на схема е достъпна",
  "binding": "Associating на променливи със стойности в схема",
  "constraint": "Ограничение, което променливите трябва да удовлетворяват",
  "typecheck": "Осигурява, че присвояванията на променливи спазват дефинираните типове.",
  "axiomatic": "Дефинира свойства на система с аксиоми, без да се включва имплементация",
  "predefined": "Стандартни типове в Z, като цели числа и множества.",
  "calculus": "Операции за комбиниране или манипулиране на схеми",
  "abstract": "Схема с високо ниво на описание без детайли",
  "normalization": "Процес на опростяване или стандартизиране на схема чрез елиминиране на излишни или ненужни части",
  "restriction": "Операция, която ограничава домейна на схема чрез добавяне на допълнителни условия или ограничения към нейните променливи",
  "renaming": "Операция, която променя името на променлива в схема, като същевременно запазва нейния тип и ограничения",
  "extension": "Операция, която добавя нови променливи или условия към съществуваща схема, разширявайки нейното определение",
  "overwriting": "Операция, която замества стойността на променлива или елемент в схема с нова стойност",
  "induction": "Метод за доказателство, който използва основен случай и индуктивна стъпка, за да покаже, че дадено твърдение е вярно за всички елементи в множество",
  "lambda": "Функция, дефинирана без име, използвана за представяне на анонимни функции в изчисления",
  "head": "Първият елемент в списък или последователност",
  "tail": "Последователността от елементи в списък, с изключение на първия",
  "front": "Всички елементи в списък или последователност, с изключение на последния",
  "last": "Последният елемент в списък или последователност",
  "flattening": "Операция, която премахва вложеността от множество или списък, като го преобразува в плоска структура",
  "filter": "Операция, която избира елементи от множество или списък, които отговарят на дадено условие",
  "reverse": "Операция, която обръща реда на елементите в списък или последователност",
  "distribution": "Операция, която разпределя елементите от едно множество или списък в друга структура, според определени правила",
  "traces": "Последователности от събития или действия, които описват поведението на система или процес",
  "bags": "Структура, подобна на множество, която позволява дублиране на елементи",
  "wff":"well-formed formula, добре оформени формули в логиката, които са съставени съгласно определени синтактични правила на даден формален език"
 
}
