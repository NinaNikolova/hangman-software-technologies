
{
  "actor": "Външен субект, който взаимодейства със системата, обикновено потребител или друга система.",
  "attribute": "Характеристика или свойство на клас, често представено като променлива.",
  "association": "Връзка между класове, която показва как са свързани.",
  "aggregation": "Тип асоциация, която представлява 'цялото-част' отношение.",
  "artifact": "Физически елемент от информация, използван или произведен от система, като файл или документ.",
  "behavior": "Действията или операциите, които обект или система извършва.",
  "boundary": "Елемент, който определя взаимодействието между системата и външни субекти.",
  "class": "Шаблон за създаване на обекти, дефиниращ атрибути и методи.",
  "collaboration": "Взаимодействие между обекти за постигане на обща цел.",
  "component": "Модулна част от система, която капсулира съдържанието си и дефинира интерфейса си.",
  "composition": "Силна асоциация, при която частта не може да съществува независимо от цялото.",
  "constraint": "Правило, което ограничава поведението или структурата на елемент.",
  "controller": "Елемент, който управлява потока на взаимодействия в системата.",
  "dependency": "Връзка, при която промяна в един елемент може да повлияе на друг.",
  "deployment": "Диаграма, която показва физическото разположение на хардуерни възли и компоненти.",
  "diagram": "Графично представяне на част от модел.",
  "element": "Основен строителен блок в UML, като клас, интерфейс или връзка.",
  "enumeration": "Тип данни, състоящ се от набор от именувани стойности.",
  "exception": "Събитие, което прекъсва нормалния поток и изисква специална обработка.",
  "extension": "Добавка към базов елемент, често използвана за прилагане на стереотипи.",
  "feature": "Характеристика на елемент, като атрибут или операция на клас.",
  "flow": "Последователност от действия или събития в процес или система.",
  "generalization": "Връзка, при която един елемент наследява атрибутите и методите на друг.",
  "inheritance": "Механизъм, който позволява един клас да наследява характеристиките на друг.",
  "interaction": "Последователност от съобщения, обменяни между обекти за постигане на цел.",
  "interface": "Договор, който определя набор от операции, които класовете трябва да изпълняват.",
  "lifeline": "Представлява съществуването на обект в диаграма на последователност.",
  "message": "Комуникация между обекти, която предава информация или задейства действия.",
  "method": "Функция или процедура, дефинирана в клас, която извършва действие.",
  "model": "Представяне на структурата, поведението или взаимодействията на система.",
  "module": "Логическа група от елементи, често използвана за организиране на кода.",
  "multiplicity": "Указва броя на инстанциите във връзка, като едно-към-много.",
  "namespace": "Контейнер за елементи, който предоставя контекст и избягва конфликти с имена.",
  "node": "Физическо устройство или среда, в която се разполагат компоненти на система.",
  "object": "Инстанция на клас, която представлява обект с атрибути и поведение.",
  "operation": "Функция или поведение, дефинирано в клас или интерфейс.",
  "package": "Групиране на свързани UML елементи, като класове или интерфейси.",
  "parameter": "Входна стойност, предавана на операция.",
  "partition": "Разделение в система, често използвано за представяне на отделни отговорности.",
  "polymorphism": "Способността на различни обекти да отговарят по свой начин на една и съща операция.",
  "port": "Точка за взаимодействие на клас или компонент с външната среда.",
  "profile": "Механизъм за разширяване, който позволява персонализиране на UML за конкретни домейни.",
  "property": "Атрибут или асоциация на клас, който дефинира характеристика.",
  "protocol": "Набор от правила за комуникация между елементи.",
  "relation": "Връзка между два елемента, която уточнява тяхната асоциация.",
  "requirement": "Условие или способност, необходима на система или потребител.",
  "role": "Определя поведението, което се очаква от обект в конкретна връзка.",
  "sequence": "Подреден набор от взаимодействия между обекти в определен ред.",
  "signal": "Асинхронно съобщение, изпратено между обекти за задействане на реакция.",
  "slot": "Присвояване на стойност на атрибут в конкретна инстанция.",
  "specification": "Подробно описание на елементи и поведение на система.",
  "state": "Състояние, в което се намира обект в даден момент.",
  "stereotype": "Начин за разширяване на UML елементи с допълнителни свойства.",
  "structure": "Организацията на компоненти или класове в система.",
  "subsystem": "Групиране на елементи, които представляват подмножество на системата.",
  "symbol": "Визуално представяне на елемент в диаграма.",
  "template": "Общ клас или метод, който може да работи с всякакъв тип данни.",
  "transition": "Промяна от едно състояние в друго в диаграма на състояния.",
  "type": "Определя естеството на атрибут или променлива, като например цяло число или низ.",
  "usecase": "Описание на взаимодействието на потребител със система за постигане на цел.",
  "view": "Перспектива на модела на системата, фокусирана върху специфични аспекти.",
  "composite": "Елемент, съставен от множество части, често с йерархична структура.",
  "connector": "Връзка, която позволява комуникация между елементи.",
  "control": "Управлява потока и времето на взаимодействията в система.",
  "decision": "Точка, в която система избира между множество пътища.",
  "derived": "Елемент, който се изчислява въз основа на други елементи.",
  "event": "Събитие, което може да предизвика промени или действия в системата.",
  "flowchart": "Графично представяне на процес, показващо стъпки и решения.",
  "fork": "Точка, в която един поток се разделя на множество паралелни потоци.",
  "hierarchy": "Класификация или организация на елементи на слоеве.",
  "history": "Запис на минали състояния или действия в диаграма на състояния.",
  "initial": "Начална точка на процес или диаграма на състояния.",
  "instance": "Конкретна поява на клас или обект.",
  "join": "Точка, в която множество потоци се обединяват в един.",
  "layer": "Хоризонтално разделение в система за организиране на функционалност.",
  "link": "Връзка между два обекта, представляваща асоциация.",
  "mapping": "Асоциация между елементи в различни модели или изгледи.",
  "merge": "Точка, в която потоци в процес се обединяват.",
  "metaclass": "Клас на класове, дефиниращ структурата на други класове.",
  "note": "Коментар или бележка в UML диаграма.",
  "occurrence": "Събитие или случка в определен момент.",
  "pattern": "Повторно използваемо решение на често срещан проблем в дизайна.",
  "postcondition": "Условие, което трябва да е вярно след изпълнение на операция.",
  "precondition": "Условие, което трябва да е вярно преди започване на операция.",
  "qualifier": "Допълнителен атрибут, който отличава инстанциите във връзка.",
  "region": "Част от диаграма на състояния или друг модел.",
  "scenario": "Конкретна последователност от взаимодействия в случай на използване.",
  "self": "OCL, Отнася се до инстанцията на клас в рамките на себе си.",
  "signalstate": "Състояние, задействано чрез получаване на сигнал.",
  "stakeholder": "Лице или група с интерес към системата.",
  "statemachine": "Поведенчески модел, показващ състояния и преходи.",
  "subtype": "Специализиран вариант на тип, който наследява неговите атрибути и методи.",
  "swimlane": "Раздел в диаграма на дейности, представящ роля или отговорност.",
  "tag": "Етикет, прикачен към елемент за допълнителна информация.",
  "testcase": "Набор от условия за тестване на функционалността на елемент.",
  "trace": "Връзка, показваща зависимости между елементи.",
  "transformation": "Промяна от един модел към друг.",
  "variation": "Разлика между елементи или процеси, често използвана в шаблони.",
  "realization": "Връзка, при която клас имплементира интерфейс.",
  "scripts": "Текстово описание на потока от събития в диаграма на последователност.",
  "decomposition": "Разделяне на система или процес на по-малки, по-лесно управляеми части.",
  "synchronous": "Съобщение или действие, което се изпълнява незабавно, като метод се извиква и изпълнява в рамките на текущия поток.",
  "asynchronous": "Съобщение или действие, което не изисква незабавно изпълнение и може да се обработи в отделен поток.",
  "fragment": "Част от диаграма, която показва специфични условия или алтернативи в потока на взаимодействия.",
  "alt": "Алтернативи - представя конструкции от тип 'ако...тогава...иначе', при които се избира една от възможните опции.",
  "opt": "Опция - представя избор за изпълнение или не на фрагмент, в зависимост от условие.",
  "loop": "Итерация - цикъл с потенциално безкрайни или предварително зададени повторения.",
  "break": "Прекъсване - модел на изключение, който прекъсва останалата част от диаграмата.",
  "par": "Паралелно изпълнение - дефинира потенциално паралелни действия на фрагментите.",
  "strict": "Строга последователност - изисква стриктен ред на изпълнение на фрагментите.",
  "seq": "Слаба последователност - позволява подредба на действията в гъвкав ред, освен в рамките на един участник.",
  "critical": "Критична област - фрагмент, представляващ регион, в който действията не могат да бъдат прекъснати от други събития.",
  "ignore": "Пропускане - определя съобщения, които не са значими и могат да бъдат игнорирани.",
  "consider": "Взети под внимание - дефинира съобщенията, които трябва да се считат за значими в конкретен фрагмент.",
  "assert": "Утвърждение - представя твърдение, че определени събития или състояния трябва да са валидни.",
  "neg": "Негативно - описва фрагменти, които са дефинирани като невалидни или представляват отказ на системата.",
  "gate": "Врата - точка на свързване между съобщения вътре и извън фрагмент.",
  "invariant": "Инвариант - ограничение върху обект, което трябва да е вярно по време на изпълнение.",
  "concurrency": "Паралелност - изпълнение на множество действия едновременно.",
  "recurrence": "Повторение - условно или итеративно изпълнение на съобщения в зависимост от зададено условие.",
  "pseudostate": "Временна или междинна точка в диаграма на състояния.",
  "junction": "Точка в диаграма на състояния, която съчетава или разделя потоци.",
  "action": "Специфично действие или операция, която система или обект извършва.",
  "activity": "Набор от свързани действия, които постигат определена цел.",
  "superstate": "Състояние, което обхваща други под-състояния.",
  "substate": "Състояние, което е част от суперсъстояние.",
  "submachine": "Подмодел на състояния, който може да бъде използван като компонент в друг модел.",
  "slimline": "Тънка линия, представляваща опростен или минимален модел.",
  "annotation": "Забележка или коментар в диаграма за допълнителна информация.",
  "pin": "Точка за вход или изход на данни в диаграма на дейности.",
  "mda": "Моделно управлявана архитектура - подход за разработка на софтуер чрез абстрактни модели.",
  "ocl": "Обектно ограничителен език - формален език за описание на ограничения и правила в UML.",
  "omg": "Object Management Group - консорциум, който разработва стандарти като UML и MDA.",
  "cim": "Изчислителен независим модел - представя бизнес процеси, без да се ангажира със системна имплементация.",
  "pim": "Платформено независим модел - модел, който не зависи от конкретна платформа.",
  "psm": "Платформено специфичен модел - модел, който е специфичен за определена платформа.",
  "portability": "Способността на система или приложение да работи на различни платформи.",
  "uml": "Унифициран език за моделиране - стандартен език за визуализация, спецификация и документация на системи.",
  "context": "Ситуацията или обхватът, в който система или елемент функционира.",
  "classifier": "Елемент в UML, който дефинира набор от атрибути и поведение.",
  "set": "Колекция от уникални елементи в OCL.",
  "bag": "Колекция в OCL, която може да съдържа дублиращи се елементи.",
  "sdlc": "Жизнен цикъл на разработка на софтуер - процес за планиране, разработка и поддръжка на софтуер.",
  "design": "Процес на планиране и създаване на структура и поведение на система.",
  "implementation": "Реализацията на проект, включително писането на код и тестване.",
  "deliverables": "Артефакти или продукти, създадени в рамките на проект.",
  "processor": "Хардуерен или софтуерен компонент, който обработва данни.",
  "device": "Физически компонент, който може да бъде част от система.",
  "connection": "Връзка между елементи, която позволява комуникация или взаимодействие.",
  "system": "Набор от свързани елементи, които работят заедно за постигане на цел.",
  "coupling": "Степента на зависимост между елементи или модули в система.",
  "cohesion": "Степента, до която елементите в модул работят заедно за изпълнение на обща цел.",
  "reusability": "Способността на компоненти или модули да бъдат използвани в различни контексти.",
  "corruption": "Състояние, при което данни или процеси са повредени или компрометирани.",
  "repository": "Централно хранилище за съхранение на данни, код или конфигурация.",
  "mvc": "Модел-Изглед-Контролер - архитектурен шаблон за разделяне на логика, потребителски интерфейс и контрол.",
  "pipeline": "Последователност от стъпки или етапи за обработка на данни.",
  "complexity": "Степента на сложност на система или процес.",
  "reliability": "Способността на система да функционира коректно за определен период от време.",
  "idempotency": "Свойството на операция да дава същия резултат, ако се изпълни няколко пъти.",
  "orm": "Обектно-релационно съпоставяне - техника за свързване на обекти с бази данни.",
  "reverse": "Процесът на анализ на съществуваща система за извличане на нейния дизайн или структура.",
  "engineering": "Приложение на научни и технически принципи за проектиране на системи.",
  "process": "Набор от стъпки или действия, използвани за постигане на резултат.",
  "integration": "Сливане на компоненти или системи за работа като цяло.",
  "planning": "Процес на дефиниране на цели и стъпки за тяхното постигане.",
  "verification": "Процес на потвърждаване, че система отговаря на спецификациите си.",
  "validation": "Процес на гарантиране, че система отговаря на изискванията на потребителите.",
  "rad": "Бързо приложение на софтуер - подход за бърза разработка чрез итерации.",
  "dsdm": "Метод за динамично разработване на системи - рамка за управление на проекти.",
  "rup": "Рационален унифициран процес - гъвкав процес за разработка на софтуер.",
  "xp": "Екстремно програмиране - гъвкав метод за разработка с фокус върху тестване и обратна връзка.",
  "aup": "Гъвкав унифициран процес - лека версия на RUP.",
  "dad": "Дисциплиниран гъвкав доставчик - хибриден метод за разработка.",
  "safe": "Scaled Agile Framework - рамка за прилагане на гъвкави методи в големи организации.",
  "less": "Large-Scale Scrum - метод за управление на гъвкави проекти в мащаб.",
  "milestones": "Ключови точки в проекта, които отбелязват завършването на важни етапи.",
  "inception": "Първоначална фаза на проект, фокусирана върху изисквания и цели.",
  "elaboration": "Фаза на разширяване на детайлите и подготовка за изпълнение.",
  "construction": "Фаза на създаване на работещи компоненти на системата.",
  "waterfall": "Линеен модел за разработка, където всяка фаза следва последователно след предходната.",
  "taxonomy": "Класификация или подреждане на елементи в групи.",
  "reengineering": "Процес на преработка на съществуваща система за подобряване или адаптация.",
  "forward": "Процес на проектиране и разработка, който започва от спецификациите и върви към имплементация."
}