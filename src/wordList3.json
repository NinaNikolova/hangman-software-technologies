{
    "architecture": "структурата на софтуерната система и нейните компоненти",
    "component": "самостоятелен модул в системата с определена функционалност",
    "module": "логическо разделение на функционалностите в системата",
    "interface": "точка за взаимодействие между компоненти",
    "layer": "логическо ниво в архитектурата за разделение на отговорности",
    "designpattern": "доказан модел за решаване на архитектурни проблеми",
    "clientserver": "архитектурен модел с клиент и сървър",
    "microservices": "архитектурен стил с малки независими услуги",
    "monolithic": "единен и неделим архитектурен стил",
    "distributed": "архитектура с компоненти на различни физически местоположения",
    "eventdriven": "архитектурен стил, базиран на събития",
    "dataflow": "архитектура, която управлява потока от данни",
    "pipefilter": "архитектура за обработка на данни в стъпки",
    "repository": "централен компонент за съхранение на данни",
    "layered": "архитектура с ясно разделени нива",
    "serviceoriented": "стил, който използва услуги за взаимодействие",
    "integration": "процесът на комбиниране на различни компоненти",
    "dependency": "връзка между два или повече компонента",
    "loosecoupling": "намаляване на зависимостите между компонентите",
    "tightcoupling": "силна зависимост между компонентите",
    "cohesion": "степента на свързаност между елементите в компонент",
    "scalability": "способността на системата да се разширява",
    "availability": "достъпността на системата за потребителите",
    "reliability": "способността на системата да работи правилно дълго време",
    "performance": "ефективността на системата",
    "faulttolerance": "способността на системата да работи при неизправности",
    "security": "защита на системата от неоторизиран достъп",
    "portability": "способността на системата да работи на различни платформи",
    "maintainability": "леснотата за поддръжка и обновяване",
    "extensibility": "способността за добавяне на нова функционалност",
    "reusability": "използването на компоненти в различни системи",
    "modularity": "разделяне на системата на малки, независими модули",
    "dataintegrity": "точността и пълнотата на данните",
    "concurrency": "способността на системата да изпълнява няколко задачи едновременно",
    "state": "информация за текущото състояние на системата",
    "session": "временна връзка между потребителя и системата",
    "transaction": "последователност от действия с гарантирана цялостност",
    "datamodel": "структурата на данните в системата",
    "deployment": "инсталиране на системата в среда",
    "cloudarchitecture": "архитектура, използваща облачни услуги",
    "api": "интерфейс за взаимодействие с приложения",
    "loadbalancer": "компонент за разпределение на натоварването",
    "cache": "място за временно съхранение на данни",
    "database": "централизирано място за съхранение на данни",
    "middleware": "слой за комуникация между различни приложения",
    "proxy": "компонент, който действа като посредник",
    "adapter": "компонент, който преобразува интерфейси",
    "connector": "компонент за свързване на системи",
    "service": "независима функционалност в системата",
    "orchestration": "координиране на взаимодействието между услуги",
    "partitioning": "разделяне на данни или задачи за ефективност",
    "redundancy": "дублиране на компоненти за повишаване на надеждността",
    "logging": "записване на действия в системата",
    "monitoring": "наблюдение на работата на системата",
    "alerting": "известяване при проблеми",
    "integrationpattern": "шаблон за свързване на системи",
    "messaging": "изпращане на съобщения между компоненти",
    "queue": "структура за съхранение на задачи за обработка",
    "broker": "компонент за управление на съобщения",
    "event": "събитие, което задейства действия",
    "observer": "модел за следене на промени",
    "singleton": "модел за създаване на единствен екземпляр",
    "factory": "модел за създаване на обекти",
    "builder": "модел за поетапно създаване на обекти",
    "prototype": "модел за клониране на обекти",
    "bridge": "модел за разделяне на интерфейс и имплементация",
    "decorator": "модел за добавяне на функционалност",
    "facade": "модел за опростяване на интерфейс",
    "proxy": "модел за контрол на достъпа",
    "command": "модел за капсулиране на действия",
    "statepattern": "модел за управление на състояния",
    "strategy": "модел за избор на поведение",
    "template": "модел за дефиниране на структура",
    "visitor": "модел за добавяне на функционалност към класове",
    "eventbus": "механизъм за управление на събития",
    "sharedstate": "състояние, споделено между компоненти",
    "versioning": "управление на версии на компоненти",
    "scalabilitypattern": "шаблон за разширяване на системата",
    "performanceoptimization": "подобряване на ефективността",
    "securitymodel": "архитектурен подход за защита",
    "availabilitypattern": "шаблон за повишаване на достъпността",
    "faultrecovery": "възстановяване след неизправност",
    "datapartitioning": "разделяне на данните за ефективност",
    "endpoint": "точка за достъп до услуга",
    "thread": "паралелна изпълнителна единица",
    "process": "независима изпълнителна програма",
    "asynchronous": "изпълнение без блокиране на процеса",
    "synchronous": "изпълнение със синхронизация",
    "authentication": "идентификация на потребител",
    "authorization": "проверка на права за достъп",
    "encryption": "защита на данните чрез кодиране",
    "decryption": "възстановяване на данни от кодиране",
    "audit": "проследяване на действия в системата"
  }